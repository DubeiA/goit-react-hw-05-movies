{"version":3,"file":"static/js/459.2d22c0a2.chunk.js","mappings":"uQAAA,IAAMA,EAAa,mCAENC,EAAmB,WAC9B,IAAMC,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,kDAAD,OAAmDH,IAC5DI,MAAK,SAACC,GAAD,OAASA,EAAIC,MAAb,IACLF,MAAK,SAACC,GAAD,OAASA,EAAIE,OAAb,GACT,EAEYC,EAAe,SAACC,GAC3B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAAuCM,EAAvC,YAAkDT,EAAlD,oBACTI,MAAK,SAAAM,GACA,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OACb,IAAIC,MAAJ,8CAGH,GAER,EAEYC,EAAkB,SAACC,GAC9B,IAAMhB,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,EACTkB,EAAAA,IAEF,OAAOb,MAAM,6CAAD,OAA8CH,EAA9C,4DAA6GgB,IACtHZ,MAAK,SAACC,GAAD,OAASA,EAAIC,MAAb,IACLF,MAAK,SAACC,GAAD,OAASA,EAAIE,OAAb,GACT,EAGYU,EAAc,SAACR,GAC1B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAAuCM,EAAvC,oBAA0DT,EAA1D,oBACTI,MAAK,SAAAM,GACA,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OACb,IAAIC,MAAJ,kCAGP,IACFV,MAAK,SAACC,GAAD,OAASA,EAAIa,IAAb,GAEP,EAEYC,EAAgB,SAACV,GAC5B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAAuCM,EAAvC,oBAA0DT,EAA1D,2BACTI,MAAK,SAAAM,GACA,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OACb,IAAIC,MAAJ,kCAGP,IACFV,MAAK,SAACC,GAAD,OAASA,EAAIE,OAAb,GAEP,C,oHC3ED,EAAgC,4B,SCgDhC,EA3Ca,WACR,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACT,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,MAECC,EAAAA,EAAAA,YAAU,WAETC,EAAAA,GAAqBN,GAAShB,KAAKoB,EACtC,GAAE,CAACJ,IAUJ,OACE,yBACOG,EAASI,OAAS,GAAI,gBAAKC,UAAWC,EAAhB,6CACnB,eAAIC,MAAO,CACPC,QAAS,IACTC,QAAS,OACTC,IAAK,GACLC,SAAU,QAJd,SAOAX,EAASY,KAAI,SAACjB,GAAD,OACjB,2BACW,gBAAKkB,MAAO,IAAKC,OAAQ,IAAKC,KApB3BC,EAoB2CrB,EAAKsB,aAlB5DD,EACI,kCAAN,OAAyCA,GAErCE,GAgBWC,IAAKxB,EAAKyB,QACd,uBAAIzB,EAAKyB,QACT,uCAAezB,EAAK0B,eAJrB1B,EAAK2B,WAnBF,IAACN,CAkBG,OAc1B,C","sources":["Api/ApiMovie.jsx","webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["const API_KEY_V3 = \"e0ed1638ffdd17848c4367fe92782c7d\";\n\nexport const getTrendingFilms = () => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/trending/all/week?${queryParams}`)\n    .then((res) => res.json())\n    .then((res) => res.results);\n};\n\nexport const getFilmsById = (moveiID) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/movie/${moveiID}?${queryParams}&language=en-US`)\n    .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n\n          return Promise.reject(\n            new Error(`We don't have information about this Movie`));\n            \n          \n        })\n    \n};\n\nexport const getFilmsByQuery = (q) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n    q,\n  }); \n  return fetch(`https://api.themoviedb.org/3/search/movie?${queryParams}&language=en-US&page=1&include_adult=false&query=${q}`)\n    .then((res) => res.json())\n    .then((res) => res.results);\n};\n\n\nexport const getCastFilm = (moveiID) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/movie/${moveiID}/credits?${queryParams}&language=en-US`)\n    .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n\n          return Promise.reject(\n            new Error(`We don't have about this Movie`));\n            \n          \n    })\n  .then((res) => res.cast);\n    \n};\n\nexport const getReviewFilm = (moveiID) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/movie/${moveiID}/reviews?${queryParams}&language=en-US&page=1`)\n    .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n\n          return Promise.reject(\n            new Error(`We don't have about this Movie`));\n            \n          \n    })\n  .then((res) => res.results);\n    \n};","// extracted by mini-css-extract-plugin\nexport default {\"error_message\":\"Cast_error_message__2682X\"};","import * as FilmsAPI from '../../Api/ApiMovie'\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport image from '../../images/Person-Outline-coloring-page.jpg'\nimport css from '../Cast/Cast.module.css'\n\nconst Cast = () => {\n     const { movieId } = useParams();\n    const [castFilm, setCastFilm] = useState([]);\n\n     useEffect(() => {\n     \n      FilmsAPI.getCastFilm(movieId).then(setCastFilm);\n  }, [movieId]);\n\n    const imageError = (pic) => { \n\n        if (pic) {\n          return `https://image.tmdb.org/t/p/w780${pic}`\n        }\n       return image }\n    \n\n  return (\n    <div>\n          {castFilm.length < 1 ? <div className={css.error_message}> We dont have any information </div> :\n              <ul style={{\n                  padding: 109,\n                  display: \"flex\",\n                  gap: 49,\n                  flexWrap: \"wrap\",\n              }}>\n                  \n             {castFilm.map((cast) => (\n          <li  key={cast.credit_id}>\n                     <img width={290} height={380} src={imageError(cast.profile_path)}\n                         alt={cast.name} />\n                     <p>{cast.name}</p>\n                     <p>Character: {cast.character}</p>\n          </li>\n        ))}\n                  \n              \n        </ul>}\n      \n    </div>\n  );\n};\n\nexport default Cast"],"names":["API_KEY_V3","getTrendingFilms","queryParams","URLSearchParams","api_key","fetch","then","res","json","results","getFilmsById","moveiID","response","ok","Promise","reject","Error","getFilmsByQuery","q","getCastFilm","cast","getReviewFilm","movieId","useParams","useState","castFilm","setCastFilm","useEffect","FilmsAPI","length","className","css","style","padding","display","gap","flexWrap","map","width","height","src","pic","profile_path","image","alt","name","character","credit_id"],"sourceRoot":""}