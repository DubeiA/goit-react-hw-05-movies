{"version":3,"file":"static/js/459.0167661e.chunk.js","mappings":"uQAAA,IAAMA,EAAa,mCAENC,EAAmB,WAC9B,IAAMC,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,kDAAD,OAAmDH,IAC5DI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,OAAR,GACZ,EAEYC,EAAe,SAAAC,GAC1B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAC4BM,EAD5B,YACuCT,EADvC,oBAEVI,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OACb,IAAIC,MAAJ,8CAEH,GACF,EAEYC,EAAkB,SAAAC,GAC7B,IAAMhB,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,EACTkB,EAAAA,IAEF,OAAOb,MAAM,6CAAD,OACmCH,EADnC,4DACkGgB,IAE3GZ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,OAAR,GACZ,EAEYU,EAAc,SAAAR,GACzB,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAC4BM,EAD5B,oBAC+CT,EAD/C,oBAGTI,MAAK,SAAAM,GACJ,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OAAO,IAAIC,MAAJ,kCACvB,IACAV,MAAK,SAAAC,GAAG,OAAIA,EAAIa,IAAR,GACZ,EAEYC,EAAgB,SAAAV,GAC3B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAC4BM,EAD5B,oBAC+CT,EAD/C,2BAGTI,MAAK,SAAAM,GACJ,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OAAO,IAAIC,MAAJ,kCACvB,IACAV,MAAK,SAAAC,GAAG,OAAIA,EAAIE,OAAR,GACZ,C,oHCvED,EAAgC,4BAAhC,EAAyE,yB,SC4CzE,EAvCa,WACX,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAqBN,GAAShB,KAAKoB,EACpC,GAAE,CAACJ,IASJ,OACE,yBACGG,EAASI,OAAS,GACjB,gBAAKC,UAAWC,EAAhB,6CAEA,eAAID,UAAWC,EAAf,SACGN,EAASO,KAAI,SAAAZ,GAAI,OAChB,2BACE,gBACEa,MAAO,IACPC,OAAQ,IACRC,KAlBKC,EAkBWhB,EAAKiB,aAjB7BD,EACI,kCAAN,OAAyCA,GAEpCE,GAeKC,IAAKnB,EAAKoB,QAEZ,uBAAIpB,EAAKoB,QACT,uCAAepB,EAAKqB,eARbrB,EAAKsB,WAdL,IAAAN,CAaO,OAgB3B,C","sources":["Api/ApiMovie.jsx","webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["const API_KEY_V3 = 'e0ed1638ffdd17848c4367fe92782c7d';\n\nexport const getTrendingFilms = () => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/trending/all/week?${queryParams}`)\n    .then(res => res.json())\n    .then(res => res.results);\n};\n\nexport const getFilmsById = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}?${queryParams}&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(\n      new Error(`We don't have information about this Movie`)\n    );\n  });\n};\n\nexport const getFilmsByQuery = q => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n    q,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?${queryParams}&language=en-US&page=1&include_adult=false&query=${q}`\n  )\n    .then(res => res.json())\n    .then(res => res.results);\n};\n\nexport const getCastFilm = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}/credits?${queryParams}&language=en-US`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(`We don't have about this Movie`));\n    })\n    .then(res => res.cast);\n};\n\nexport const getReviewFilm = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}/reviews?${queryParams}&language=en-US&page=1`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(`We don't have about this Movie`));\n    })\n    .then(res => res.results);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error_message\":\"Cast_error_message__2682X\",\"list_style\":\"Cast_list_style__WrJGY\"};","import * as FilmsAPI from '../../Api/ApiMovie';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport image from '../../images/Person-Outline-coloring-page.jpg';\nimport css from '../Cast/Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castFilm, setCastFilm] = useState([]);\n\n  useEffect(() => {\n    FilmsAPI.getCastFilm(movieId).then(setCastFilm);\n  }, [movieId]);\n\n  const imageError = pic => {\n    if (pic) {\n      return `https://image.tmdb.org/t/p/w780${pic}`;\n    }\n    return image;\n  };\n\n  return (\n    <div>\n      {castFilm.length < 1 ? (\n        <div className={css.error_message}> We dont have any information </div>\n      ) : (\n        <ul className={css.list_style}>\n          {castFilm.map(cast => (\n            <li key={cast.credit_id}>\n              <img\n                width={290}\n                height={380}\n                src={imageError(cast.profile_path)}\n                alt={cast.name}\n              />\n              <p>{cast.name}</p>\n              <p>Character: {cast.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY_V3","getTrendingFilms","queryParams","URLSearchParams","api_key","fetch","then","res","json","results","getFilmsById","moveiID","response","ok","Promise","reject","Error","getFilmsByQuery","q","getCastFilm","cast","getReviewFilm","movieId","useParams","useState","castFilm","setCastFilm","useEffect","FilmsAPI","length","className","css","map","width","height","src","pic","profile_path","image","alt","name","character","credit_id"],"sourceRoot":""}