{"version":3,"file":"static/js/315.75482a5d.chunk.js","mappings":"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","sources":["Api/ApiMovie.jsx","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","pages/Movie/Movie.jsx","webpack://react-homework-template/./src/pages/Home/Home.module.css?1370"],"sourcesContent":["const API_KEY_V3 = \"e0ed1638ffdd17848c4367fe92782c7d\";\n\nexport const getTrendingFilms = () => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/trending/all/week?${queryParams}`)\n    .then((res) => res.json())\n    .then((res) => res.results);\n};\n\nexport const getFilmsById = (moveiID) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/movie/${moveiID}?${queryParams}&language=en-US`)\n    .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n\n          return Promise.reject(\n            new Error(`We don't have information about this Movie`));\n            \n          \n        })\n    \n};\n\nexport const getFilmsByQuery = (q) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n    q,\n  }); \n  return fetch(`https://api.themoviedb.org/3/search/movie?${queryParams}&language=en-US&page=1&include_adult=false&query=${q}`)\n    .then((res) => res.json())\n    .then((res) => res.results);\n};\n\n\nexport const getCastFilm = (moveiID) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/movie/${moveiID}/credits?${queryParams}&language=en-US`)\n    .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n\n          return Promise.reject(\n            new Error(`We don't have about this Movie`));\n            \n          \n    })\n  .then((res) => res.cast);\n    \n};\n\nexport const getReviewFilm = (moveiID) => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/movie/${moveiID}/reviews?${queryParams}&language=en-US&page=1`)\n    .then(response => {\n          if (response.ok) {\n            return response.json()\n          }\n\n          return Promise.reject(\n            new Error(`We don't have about this Movie`));\n            \n          \n    })\n  .then((res) => res.results);\n    \n};","// extracted by mini-css-extract-plugin\nexport default {\"search\":\"Searchbar_search__RgdH8\",\"searchTerm\":\"Searchbar_searchTerm__Yautg\",\"searchButton\":\"Searchbar_searchButton__8lE-T\",\"wrap\":\"Searchbar_wrap__FXu2S\"};","import {useState } from 'react'\nimport css from '../Searchbar/Searchbar.module.css'\nimport PropTypes from 'prop-types';\n\n\nexport default function Searchbar({onSubmit}) {\n    const [searchName, setSearchName] = useState('');\n\n    const handleNameChange = event => { \n        setSearchName(event.currentTarget.value.toLowerCase());\n    }\n\n    const submitForm = event => { \n        event.preventDefault();\n\n        if (searchName.trim() === '') {\n            alert('Something go wrong. Try one more time')\n            return\n        }\n        onSubmit(searchName);\n       setSearchName('')\n    }\n\n    \n\n    return (\n       \n\n        <form className={css.search}\n            // className={css.SearchForm}\n            onSubmit={submitForm}>\n           \n        <input\n            className={css.searchTerm}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            value={searchName}\n            onChange={handleNameChange}              \n            />\n            \n            <button className={css.searchButton} type=\"submit\" >Search</button>\n            \n            </form>\n       \n    )\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n\n}","import { useState, useEffect } from \"react\"\nimport MovieSearch from \"components/Searchbar/Searchbar\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport * as FilmsAPI from \"../../Api/ApiMovie\";\nimport css from '../Home/Home.module.css'\nimport image from '../../images/film-plug.webp'\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Movie = () => { \n    const [searchParams, setSearchParams] = useSearchParams();\n    const [filmsByQuery, setFilmsByQuery] = useState([])\n    const query = searchParams.get('query') ?? ''\n  const location = useLocation();\n  \n     const submitForm = params => {\n    setSearchParams(params !== '' ? { query: params } : {})\n    \n  }\n\n    useEffect(() => {\n        if (query === '') {\n        return \n      \n        }\n      FilmsAPI.getFilmsByQuery(query).then(setFilmsByQuery)\n  \n    }, [query])\n\n  const poster = (poster) => {\n    if (!poster) {\n      return image\n    }\n   \n     return `${IMAGE_URL}${poster}`\n  };\n\n\n    return (\n        <>\n         <MovieSearch onSubmit={submitForm}/>\n        \n         \n       {filmsByQuery && <ul className={css.home_styled_ul }>\n        {filmsByQuery.map((film) => (\n          <li className={css.list_home } key={film.id}>\n            <Link className={css.home_link} to={`/goit-react-hw-05-movies/movies/${film.id}`} state={{ from: location }}>\n              <img className={css.home_img} width={420} src={poster(film.poster_path)} alt={film.title} />{film.title} {film.name}</Link>\n          </li>\n        ))}\n            </ul>}\n        </>\n    \n       \n    )\n}\n\n\nexport default Movie","// extracted by mini-css-extract-plugin\nexport default {\"home_styled_ul\":\"Home_home_styled_ul__zNaTm\",\"list_home\":\"Home_list_home__K041t\",\"home_img\":\"Home_home_img__inaBL\",\"home_link\":\"Home_home_link__CREjD\"};"],"names":["API_KEY_V3","getTrendingFilms","queryParams","URLSearchParams","api_key","fetch","then","res","json","results","getFilmsById","moveiID","response","ok","Promise","reject","Error","getFilmsByQuery","q","getCastFilm","cast","getReviewFilm","Searchbar","onSubmit","useState","searchName","setSearchName","className","css","event","preventDefault","trim","alert","type","autoComplete","autoFocus","value","onChange","currentTarget","toLowerCase","useSearchParams","searchParams","setSearchParams","filmsByQuery","setFilmsByQuery","query","get","location","useLocation","useEffect","FilmsAPI","params","map","film","to","id","state","from","width","src","poster","poster_path","image","alt","title","name"],"sourceRoot":""}