{"version":3,"file":"static/js/681.8804a5be.chunk.js","mappings":"uQAAA,IAAMA,EAAa,mCAENC,EAAmB,WAC9B,IAAMC,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,kDAAD,OAAmDH,IAC5DI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,OAAR,GACZ,EAEYC,EAAe,SAAAC,GAC1B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAC4BM,EAD5B,YACuCT,EADvC,oBAEVI,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OACb,IAAIC,MAAJ,8CAEH,GACF,EAEYC,EAAkB,SAAAC,GAC7B,IAAMhB,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,EACTkB,EAAAA,IAEF,OAAOb,MAAM,6CAAD,OACmCH,EADnC,4DACkGgB,IAE3GZ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,OAAR,GACZ,EAEYU,EAAc,SAAAR,GACzB,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAC4BM,EAD5B,oBAC+CT,EAD/C,oBAGTI,MAAK,SAAAM,GACJ,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OAAO,IAAIC,MAAJ,kCACvB,IACAV,MAAK,SAAAC,GAAG,OAAIA,EAAIa,IAAR,GACZ,EAEYC,EAAgB,SAAAV,GAC3B,IAAMT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAEX,OAAOK,MAAM,sCAAD,OAC4BM,EAD5B,oBAC+CT,EAD/C,2BAGTI,MAAK,SAAAM,GACJ,OAAIA,EAASC,GACJD,EAASJ,OAGXM,QAAQC,OAAO,IAAIC,MAAJ,kCACvB,IACAV,MAAK,SAAAC,GAAG,OAAIA,EAAIE,OAAR,GACZ,C,mHCvED,EAA4B,0BAA5B,EAA+D,uBAA/D,EAA6F,qBAA7F,EAAkI,8B,SCiClI,EA7BgB,WACd,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MAKjB,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAuBR,GAAShB,KAAKoB,EACtC,GAAE,CAACJ,KAGF,gBAAKS,UAAWC,EAAhB,SACGP,EAAYQ,OAAS,GACpB,0BACGR,EAAYS,KAAI,SAAAC,GAAM,OACrB,2BACE,cAAGJ,UAAWC,EAAd,SAA2BG,EAAOC,UAClC,eAAGL,UAAWC,EAAd,wBAAoCG,EAAOE,aAFpCF,EAAOG,GADK,KAMvB,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMb,SAGvB,gBAAKI,UAAWC,EAAhB,oDAMP,C","sources":["Api/ApiMovie.jsx","webpack://react-homework-template/./src/pages/Reviews/Review.module.css?a953","pages/Reviews/Reviews.jsx"],"sourcesContent":["const API_KEY_V3 = 'e0ed1638ffdd17848c4367fe92782c7d';\n\nexport const getTrendingFilms = () => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(`https://api.themoviedb.org/3/trending/all/week?${queryParams}`)\n    .then(res => res.json())\n    .then(res => res.results);\n};\n\nexport const getFilmsById = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}?${queryParams}&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(\n      new Error(`We don't have information about this Movie`)\n    );\n  });\n};\n\nexport const getFilmsByQuery = q => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n    q,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?${queryParams}&language=en-US&page=1&include_adult=false&query=${q}`\n  )\n    .then(res => res.json())\n    .then(res => res.results);\n};\n\nexport const getCastFilm = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}/credits?${queryParams}&language=en-US`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(`We don't have about this Movie`));\n    })\n    .then(res => res.cast);\n};\n\nexport const getReviewFilm = moveiID => {\n  const queryParams = new URLSearchParams({\n    api_key: API_KEY_V3,\n  });\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${moveiID}/reviews?${queryParams}&language=en-US&page=1`\n  )\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error(`We don't have about this Movie`));\n    })\n    .then(res => res.results);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contsiner\":\"Review_contsiner__8ekrg\",\"author\":\"Review_author__ms+C9\",\"text\":\"Review_text__kHvhy\",\"error_message\":\"Review_error_message__i3mCI\"};","import * as FilmsAPI from '../../Api/ApiMovie';\nimport { useState, useEffect } from 'react';\nimport { useParams, useLocation, Link } from 'react-router-dom';\nimport css from '../Reviews/Review.module.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsFilm, setReviewsFilm] = useState([]);\n  const location = useLocation();\n  useEffect(() => {\n    FilmsAPI.getReviewFilm(movieId).then(setReviewsFilm);\n  }, [movieId]);\n\n  return (\n    <div className={css.contsiner}>\n      {reviewsFilm.length > 0 ? (\n        <ul>\n          {reviewsFilm.map(review => (\n            <li key={review.id}>\n              <p className={css.author}>{review.author}</p>\n              <p className={css.text}>Character: {review.content}</p>\n            </li>\n          ))}\n          <Link state={{ from: location }}></Link>\n        </ul>\n      ) : (\n        <div className={css.error_message}>\n          We dont have any information about it\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY_V3","getTrendingFilms","queryParams","URLSearchParams","api_key","fetch","then","res","json","results","getFilmsById","moveiID","response","ok","Promise","reject","Error","getFilmsByQuery","q","getCastFilm","cast","getReviewFilm","movieId","useParams","useState","reviewsFilm","setReviewsFilm","location","useLocation","useEffect","FilmsAPI","className","css","length","map","review","author","content","id","state","from"],"sourceRoot":""}